// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity ^0.8.17;

interface IIndexMarker {
    event AdminChanged(address previousAdmin, address newAdmin);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    event BeaconUpgraded(address indexed beacon);
    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);
    event Initialized(uint8 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Upgraded(address indexed implementation);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function TOMB_ARTIST() external view returns (address);

    function adminMint(uint256[] memory tokenIds, address[] memory recipients) external;

    function approve(address to, uint256 tokenId) external;

    function balanceOf(address owner) external view returns (uint256);

    function baseURI() external view returns (string memory);

    function canMint() external view returns (bool);

    function delegate(address delegatee) external;

    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;

    function delegates(address account) external view returns (address);

    function deleteDefaultRoyalty() external;

    function getApproved(uint256 tokenId) external view returns (address);

    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);

    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);

    function getVotes(address account) external view returns (uint256);

    function indexContract() external view returns (address);

    function indexMarkerV1() external view returns (address);

    function initialize(
        address _marketFilterDAOAddress,
        address _tokenClaimSigner,
        address _indexMarkerV1,
        address _defaultRoyalty,
        address _indexContract
    ) external;

    function isApprovedForAll(address owner, address operator) external view returns (bool);

    function isMintAllowed() external view returns (bool);

    function isSingletonTombToken(address, uint256) external view returns (bool);

    function isTomb(address _tokenContract, uint256 _tokenId) external view returns (bool);

    function isTombContract(address) external view returns (bool);

    function manageMarketFilterDAOSubscription(bool enable) external;

    function marketFilterDAOAddress() external view returns (address);

    function migrationMint(uint256[] memory tokenIds) external;

    function mint(uint256 tokenId, bytes memory signature) external;

    function mintExpiry() external view returns (uint256);

    function name() external view returns (string memory);

    function nonces(address owner) external view returns (uint256);

    function operatorFilterRegistry() external view returns (address);

    function owner() external view returns (address);

    function ownerOf(uint256 tokenId) external view returns (address);

    function premint(bytes32 _hash) external;

    function premintTimes(bytes32) external view returns (uint256);

    function proxiableUUID() external view returns (bytes32);

    function renounceOwnership() external;

    function resetTokenRoyalty(uint256 tokenId) external;

    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address, uint256);

    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external;

    function setApprovalForAll(address operator, bool approved) external;

    function setBaseURI(string memory newBaseURI) external;

    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;

    function setMintAllowedAndExpiry(bool _isMintAllowed, uint256 _expiry) external;

    function setTokenClaimSigner(address _tokenClaimSigner) external;

    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;

    function setTombContracts(address[] memory _contracts, bool[] memory _isTombContract) external;

    function setTombTokens(address[] memory _contracts, uint256[] memory _tokenIds, bool[] memory _isTombToken)
        external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function symbol() external view returns (string memory);

    function tokenClaimSigner() external view returns (address);

    function tokenURI(uint256 tokenID) external view returns (string memory);

    function transferFrom(address from, address to, uint256 tokenId) external;

    function transferOwnership(address newOwner) external;

    function updateMarketFilterSettings(bytes memory args) external returns (bytes memory);

    function upgradeTo(address newImplementation) external;

    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
